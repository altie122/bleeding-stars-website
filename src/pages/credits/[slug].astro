---
import { type CollectionEntry, getCollection } from "astro:content";
import Avatar from "~/components/avatar.astro";
import { randomFromArray } from "~/helpers/random.js";
import Layout from "~/layouts/Layout.astro";

export type Props = {
	post: CollectionEntry<"authors">;
};

export async function getStaticPaths() {
	const person = await getCollection("authors");

	return person.map((post) => ({
		params: { slug: post.slug },
		props: { post },
	}));
}

const { post } = Astro.props;

const { data, render } = post;
const { Content } = await render();

const gradients = [
	"bg-red-pink-gradient",
	"bg-blue-green-gradient",
	"bg-blue-purple-gradient",
	"bg-orange-yellow-gradient",
];

const placeholderGradient = randomFromArray(gradients);
---

<Layout
	title={data.name}
	description={post.body}
>
<div
	class:list={[
		"z-blur -mb-56 h-64 w-full md:-mb-52 md:h-64 lg:-mb-80 lg:h-96",
		placeholderGradient,
	]}
/>

	<div class="grid-container relative mx-auto max-w-screen-lg md:z-10 prose">
		<div
			class="mx-auto w-fit max-w-full bg-background py-8 md:px-10 md:py-12 lg:p-12 lg:py-16 xl:p-16 xl:py-20 px-1"
		>
			<header class="mx-auto w-full max-w-prose text-center">
				<h1 class="heading-3 mb-4 mt-2 md:heading-2 sm:mb-5 sm:mt-3">{data.name}</h1>
				<div
					class="flex flex-wrap items-center justify-center gap-x-4 gap-y-2 text-astro-gray-200 md:gap-y-4"
				>
					<div class="flex items-center gap-2">
						<Avatar name={post.slug} xl />
					</div>
				</div>
				<h3>Role(s): {data.role.map((role: any) => String(role)).join(", ")}</h3>
				{data.voiced && (
					<h3>Voiced Role(s): {data.voiced.map((voices: any) => String(voices)).join(", ")}</h3>
				)}
			</header>
			<hr class="md:-mx-10 lg:-mx-12 xl:-mx-16 my-8 lg:my-16" />
			<h1>About {data.name}:</h1>
			<hr />
			<article class="">
				<Content />
			</article>
		</div>
	</div>
</Layout>

<script>
	// Remove autoplay from videos when `prefers-reduced-motion: reduce`
	const autoplayVideos = document.querySelectorAll("video[autoplay]")
	const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches

	if (prefersReducedMotion) {
		autoplayVideos.forEach((video) => {
			video.removeAttribute("autoplay")
			// Add controls attribute so user can still play the video if they want
			video.setAttribute("controls", "true")
		})
	}
</script>
