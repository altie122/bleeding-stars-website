---
import type { Page } from "astro";
import type { HTMLAttributes } from "astro/types";
import { collapseRange, type Ellipsis } from "~/helpers/paginate";

type PageLink = {
  pageNum: number;
  text: string;
  href: string;
};

export type Props = Omit<HTMLAttributes<"nav">, "slot"> & {
  page: Page<unknown>;
  allPages: string[];
  restRoute?: boolean;
};

const {
  page,
  allPages,
  restRoute = false,
  "aria-label": ariaLabel = "Pagination",
  ...attrs
} = Astro.props;

const pages: PageLink[] = allPages.map((href, i) => ({
  pageNum: i + 1,
  text: String(i + 1),
  href,
}));

const collapsedPages = collapseRange(page, pages);

import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";

function isPageLink(link: PageLink | Ellipsis): link is PageLink {
  return (link as PageLink).pageNum !== undefined;
}
---

<Pagination>
  <PaginationContent>
    {page.url.prev && (
      <PaginationItem>
        <PaginationPrevious href={page.url.prev} />
      </PaginationItem>
    )}
    {collapsedPages.map((link, index) =>
      isPageLink(link) ? (
        <PaginationItem key={link.pageNum}>
          <PaginationLink href={link.href} isActive={link.pageNum === page.currentPage}>
            {link.pageNum}
          </PaginationLink>
        </PaginationItem>
      ) : (
        <PaginationItem key={`ellipsis-${index}`}>
          <PaginationEllipsis />
        </PaginationItem>
      )
    )}
    {page.url.next && (
      <PaginationItem>
        <PaginationNext href={page.url.next} />
      </PaginationItem>
    )}
  </PaginationContent>
</Pagination>
